library(janitor)
us_china_totals <- clean_names(us_china_totals)
View(us_china_totals)
server <- function(input, output) {
df <- us_china_totals
data <- reactive({
d <- filter(df, Section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, trade_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, trade_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose a Category",
choices = unique(us_china_totals[["section"]])),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, trade_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose a Category",
choices = unique(us_china_totals[["section"]])),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, trade_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose a Category",
choices = unique(us_china_totals[["section"]])),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt) %>%
facet_wrap("type")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") %>%
facet_wrap("type") %>%
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") %>%
facet_wrap(type)
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") %>%
facet_wrap("type")
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggplot(plt) +
facet_wrap(~type)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap(type)
ggplot(plt) +
})
}
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap(type)
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap(~type)
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap("type")
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
str(us_china_totals)
us_china_totals$time <- as.character(us_china_totals$time)
shinyApp(ui = ui, server = server)
us_china_totals$trade_value <- round(us_china_totals$trade_value,0)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
path <- "/Users/Nate/Desktop/Graduate School/Courses/Second Year/Winter Quarter/Data and Programming II/Final Project/D-P-II-Final-Project/"
df <- read_csv(paste0(path, "shiny_test.csv"))
data <- reactive({
d <- filter(df, Section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(Time, total_trade), stat = "identity") +
scale_fill_manual(values = wes_palette(4, name = "GrandBudapest1", type = "continuous"), name = "") +
scale_y_continuous(labels = NULL) +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
us_china_totals$time <- as.character(us_china_totals$time)
us_china_totals$trade_value <- round(us_china_totals$trade_value,0)
server <- function(input, output) {
path <- "/Users/Nate/Desktop/Graduate School/Courses/Second Year/Winter Quarter/Data and Programming II/Final Project/D-P-II-Final-Project/"
df <- read_csv(paste0(path, "shiny_test.csv"))
data <- reactive({
d <- filter(df, Section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(Time, total_trade), stat = "identity") +
scale_fill_manual(values = wes_palette(4, name = "GrandBudapest1", type = "continuous"), name = "") +
scale_y_continuous(labels = NULL) +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
str(us_china_totals)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose a Category",
choices = unique(us_china_totals[["section"]])),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity", color = "type") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, color = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose a Category",
choices = unique(us_china_totals[["section"]])),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_line(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
