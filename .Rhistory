plyr::rename(replace = c(sentiment = s, value = s), warn_missing = FALSE)
sentiment_plot <- ggplot(data = filter(word_tokens_df_nsw, !is.na(nrc))) +
geom_histogram(aes(nrc, fill = nrc), stat = "count") +
geom_text(stat = "count", aes(nrc, label=..count..), vjust = -0.65, size = 2.5) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = ("Sentiments Expressed by NYT and People's Daily")) +
xlab("Sentiment") +
ylab("Count of Words") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
return(sentiment_plot)
}
}
sentiments_function(nyt2021)
summary(plm(formula = trade_openness ~ gdp, data = world_trade_final, effect = "individual"), index = c("country_name", "year"))
orld_trade_final %>%
filter(country_name == "United States" | country_name == "China") %>%
ggplot() +
geom_col(aes(x = year, y = trade_openness, fill = trade_openness)) +
geom_text(aes(x = year, y = trade_openness, label = round(trade_openness, 2), vjust = -1), color = "chocolate4") +
scale_fill_gradient(low = "red", high = "orange") +
xlab("Year") +
ylab("Ratio of Trade Volume to GDP") +
ylim(0, 0.5) +
ggtitle("Comparing US and Chinese Trade Openness, 2017-19") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(fill = "linen", color = "linen"), legend.position = "none") +
facet_wrap(~country_name) +
annotation_custom(world_avg)
world_trade_final %>%
filter(country_name == "United States" | country_name == "China") %>%
ggplot() +
geom_col(aes(x = year, y = trade_openness, fill = trade_openness)) +
geom_text(aes(x = year, y = trade_openness, label = round(trade_openness, 2), vjust = -1), color = "chocolate4") +
scale_fill_gradient(low = "red", high = "orange") +
xlab("Year") +
ylab("Ratio of Trade Volume to GDP") +
ylim(0, 0.5) +
ggtitle("Comparing US and Chinese Trade Openness, 2017-19") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(fill = "linen", color = "linen"), legend.position = "none") +
facet_wrap(~country_name) +
annotation_custom(world_avg)
?tribble
tribble(
country_name = "Libya", "Venezuela", "South Sudan")
tribble(
~country_name, ~year, ~gdp, ~gdpgrowth, ~gdppercap2010usd, ~gdppercapcurrentusd, ~percenttradegdp, ~country_code, ~exports_of_goods_and_services_current_us, ~imports_of_goods_and_services_bo_p_current_us,
~trade_openness,
"Libya", "Venezuela", "South Sudan")
tribble(
~country_name, ~year, ~gdp, ~gdpgrowth, ~gdppercap2010usd, ~gdppercapcurrentusd, ~percenttradegdp, ~country_code, ~exports_of_goods_and_services_current_us, ~imports_of_goods_and_services_bo_p_current_us,
~trade_openness,
"Libya", 2017, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
tribble(
~country_name, ~year, ~gdp, ~gdpgrowth, ~gdppercap2010usd, ~gdppercapcurrentusd, ~percenttradegdp, ~country_code, ~exports_of_goods_and_services_current_us, ~imports_of_goods_and_services_bo_p_current_us,
~trade_openness,
"Libya", 2017, 0,0,0,0,0,0,0,0,0)
styler:::style_active_file()
sentiments_function(peoplesdailymarch4_21)
sentiments_function(nytsep25_18)
sentiments_function(nyt2021)
stargazer(trade_fixed_effects, type = "text", order = c("is_2019:country_name_united_states", "is_2019:country_name_china", "country_name_united_states", "country_name_china"), omit = c(10:549)) # Individual countries other than the US and China omitted to keep output table manageable
source('~/Desktop/Graduate School/Courses/Second Year/Winter Quarter/Data and Programming II/Final Project/D-P-II-Final-Project/NJacobs_Final_Project.R', echo=TRUE)
runApp()
library(shiny)
library(tidyverse)
library(plotly)
library(scales)
library(wesanderson)
library(grid)
library(shiny)
library(tidyverse)
library(plotly)
library(scales)
library(wesanderson)
library(grid)
library(classInt)
shinyApp(ui = ui, server = server)
us_china_totals <- read_csv("us_china_totals.csv")
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(tidyverse)
library(shiny)
library(tidyverse)
library(plotly)
library(scales)
library(wesanderson)
library(grid)
library(classInt)
us_china_totals <- read_csv("us_china_totals.csv")
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
library(ggthemes)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(plotly)
library(janitor)
library(scales)
library(countrycode)
library(StandardizeText)
library(RColorBrewer)
library(classInt)
library(scales)
library(grid)
library(directlabels)
library(ggthemes)
library(wesanderson)
us_china_totals <- read_csv("us_china_totals.csv")
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- read_csv("us_china_totals.csv")
df <- df%>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
server <- function(input, output) {
df <- read_csv("us_china_totals.csv")
df <- df%>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
df <- read_csv("us_china_totals.csv"),
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(df[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- df%>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_total[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(plotly)
library(janitor)
library(scales)
library(countrycode)
library(StandardizeText)
library(RColorBrewer)
library(classInt)
library(scales)
library(grid)
library(directlabels)
library(ggthemes)
library(wesanderson)
us_china_totals <- read_csv("us_china_totals.csv")
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
us_china_totals <- read_csv("D-P-II-Final-Project/us_china_totals.csv")
# Interactive Plot of Trade Volume Between the US and China, using US--China trade flow data
setwd("D-P-II-Final-Project")
# Interactive Plot of Trade Volume Between the US and China, using US--China trade flow data
setwd("D-P-II-Final-Project")
setwd("D-P-II-Final-Project")
setwd("~/Desktop/Graduate School/Courses/Second Year/Winter Quarter/Data and Programming II/Final Project/D-P-II-Final-Project")
# Interactive Plot of Trade Volume Between the US and China, using US--China trade flow data
setwd("D-P-II-Final-Project")
setwd("D-P-II-Final-Project")
rm(list = ls())
# Interactive Plot of Trade Volume Between the US and China, using US--China trade flow data
us_china_totals <- read_csv("us_china_totals.csv")
library(tidyverse)
library(shiny)
library(plotly)
library(janitor)
library(scales)
library(countrycode)
library(StandardizeText)
library(RColorBrewer)
library(classInt)
library(scales)
library(grid)
library(directlabels)
library(ggthemes)
library(wesanderson)
# Interactive Plot of Trade Volume Between the US and China, using US--China trade flow data
us_china_totals <- read_csv("us_china_totals.csv")
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
us_china_totals <- read_csv("us_china_totals.csv")
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose an Import/Export Category",
choices = unique(us_china_totals[["section"]])
),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
theme(legend.position = "none", panel.background = element_rect(fill = "aliceblue"), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_economist() +
labs(title = input$category, x = "Year", y = "Trade Volume") +
ggtitle("US-China Trade Flows by Product Category, 2017-2019") +
scale_y_continuous(labels = dollar_format()) +
scale_fill_manual(values = wes_palette("GrandBudapest2", n = 2))
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
