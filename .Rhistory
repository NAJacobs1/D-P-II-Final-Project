})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap(type)
ggplot(plt) +
})
}
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap(type)
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap(~type)
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlot({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume") +
facet_wrap("type")
ggplot(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
str(us_china_totals)
us_china_totals$time <- as.character(us_china_totals$time)
shinyApp(ui = ui, server = server)
us_china_totals$trade_value <- round(us_china_totals$trade_value,0)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
path <- "/Users/Nate/Desktop/Graduate School/Courses/Second Year/Winter Quarter/Data and Programming II/Final Project/D-P-II-Final-Project/"
df <- read_csv(paste0(path, "shiny_test.csv"))
data <- reactive({
d <- filter(df, Section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(Time, total_trade), stat = "identity") +
scale_fill_manual(values = wes_palette(4, name = "GrandBudapest1", type = "continuous"), name = "") +
scale_y_continuous(labels = NULL) +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
us_china_totals$time <- as.character(us_china_totals$time)
us_china_totals$trade_value <- round(us_china_totals$trade_value,0)
server <- function(input, output) {
path <- "/Users/Nate/Desktop/Graduate School/Courses/Second Year/Winter Quarter/Data and Programming II/Final Project/D-P-II-Final-Project/"
df <- read_csv(paste0(path, "shiny_test.csv"))
data <- reactive({
d <- filter(df, Section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(Time, total_trade), stat = "identity") +
scale_fill_manual(values = wes_palette(4, name = "GrandBudapest1", type = "continuous"), name = "") +
scale_y_continuous(labels = NULL) +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
str(us_china_totals)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose a Category",
choices = unique(us_china_totals[["section"]])),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value), stat = "identity", color = "type") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, color = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(
inputId = "category",
label = "Choose a Category",
choices = unique(us_china_totals[["section"]])),
plotlyOutput("trade_table"),
tableOutput("cat_disp"),
)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_line(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
df <- us_china_totals %>%
group_by(section, time, type) %>%
summarise(total_value = sum(trade_value))
data <- reactive({
d <- filter(df, section == input$category)
return(d)
})
output$cat_disp <- renderTable({
data()
})
output$trade_table <- renderPlotly({
plt <- ggplot(data = data()) +
geom_bar(aes(time, total_value, fill = type), stat = "identity") +
labs(title = input$category, x = "Year", y = "Trade Volume")
ggplotly(plt)
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(rworldmap)
library(fredr)
library(shiny)
library(plotly)
library(wesanderson)
library(tidytext)
library(textdata)
library(SnowballC)
library(udpipe)
library(ggraph)
library(igraph)
library(fredr)
library(janitor)
setwd("/Users/Nate/Desktop/Graduate School/Courses/Second Year/Winter Quarter/Data and Programming II/Final Project/D-P-II-Final-Project")
rm(list = ls())
options(scipen = 999)
us_fdi <- read_csv("US_FdiFlowsStock_ST202007161100_v1.csv")
us_ex_to_china_2018 <- read_csv("US_Ex_to_China_OEC_2018.csv")
us_ex_to_china_2019 <- read_csv("US_Ex_to_China_OEC_2019.csv")
us_ex_to_china_2020 <- read_csv("US_Ex_to_China_OEC_2020.csv")
us_im_from_china_2018 <- read_csv("US_Im_from_China_OEC_2018.csv")
us_im_from_china_2019 <- read_csv("US_Im_from_China_OEC_2019.csv")
us_im_from_china_2020 <- read_csv("US_Im_from_China_OEC_2020.csv")
world_trade_flows <- read_csv("BACI_HS17_Y2019_V202102.csv")
country_codes <- read_csv("country_codes_V202102.csv")
product_codes <- read_csv("product_codes_HS17_V202102.csv")
gdp_data <- read_csv("2b68fee6-4c0f-4592-a63f-ff85acd68db3_Data.csv")
rm(list = ls())
# Reading in trade data
us_fdi <- read_csv("US_FdiFlowsStock_ST202007161100_v1.csv")
# Reading in trade data
us_fdi <- read_csv("US_FdiFlowsStock_ST202007161100_v1.csv")
us_ex_to_china_2018 <- read_csv("US_Ex_to_China_OEC_2018.csv")
us_ex_to_china_2019 <- read_csv("US_Ex_to_China_OEC_2019.csv")
us_ex_to_china_2020 <- read_csv("US_Ex_to_China_OEC_2020.csv")
us_im_from_china_2018 <- read_csv("US_Im_from_China_OEC_2018.csv")
us_im_from_china_2019 <- read_csv("US_Im_from_China_OEC_2019.csv")
us_im_from_china_2020 <- read_csv("US_Im_from_China_OEC_2020.csv")
world_trade_flows <- read_csv("BACI_HS17_Y2019_V202102.csv")
country_codes <- read_csv("country_codes_V202102.csv")
product_codes <- read_csv("product_codes_HS17_V202102.csv")
gdp_data <- read_csv("2b68fee6-4c0f-4592-a63f-ff85acd68db3_Data.csv")
# Tidying trade data
head(world_trade_flows)
us_fdi <- us_fdi %>%
subset(select = -c(9, 11, 13, 15, 17))
#Citation: https://medium.com/coinmonks/merging-multiple-dataframes-in-r-72629c4632a3
exports_merged <- do.call("rbind", list(us_ex_to_china_2018, us_ex_to_china_2019, us_ex_to_china_2020))
imports_merged <- do.call("rbind", list(us_im_from_china_2018, us_im_from_china_2019, us_im_from_china_2020))
exports_merged <- exports_merged %>%
mutate(type = "Export--US to China")
imports_merged <- imports_merged %>%
mutate(type = "Import--US from China")
us_china_totals <- rbind(exports_merged, imports_merged)
us_china_totals <- clean_names(us_china_totals)
us_china_totals$time <- as.character(us_china_totals$time)
#World trade flows data--see documentation  here: http://www.cepii.fr/DATA_DOWNLOAD/baci/doc/DescriptionBACI.html
world_trade_flows <- world_trade_flows %>%
rename(year = "t", product_cat = "k", exporter = "i", importer = "j", trade_flow = "v", quantity_tons = "q")
world_trade_flows <- world_trade_flows %>%
inner_join(country_codes, by = c("exporter" = "country_code"))
world_trade_flows <- world_trade_flows %>%
rename(exporter_name = country_name_full)
world_trade_flows <- world_trade_flows %>%
select(-country_name_abbreviation)
world_trade_flows <- world_trade_flows %>%
select(-c(iso_2digit_alpha, iso_3digit_alpha))
world_trade_flows <- world_trade_flows %>%
inner_join(country_codes, by = c("importer" = "country_code"))
world_trade_flows <- world_trade_flows %>%
rename(importer_name = country_name_full)
world_trade_flows <- world_trade_flows %>%
select(-country_name_abbreviation)
world_trade_flows <- world_trade_flows %>%
select(-c(iso_2digit_alpha, iso_3digit_alpha))
product_codes$code <- as.character(product_codes$code)
world_trade_flows <- world_trade_flows %>%
inner_join(product_codes, by = c("product_cat" = "code"))
head(world_trade_flows)
world_trade_flows <- world_trade_flows %>%
filter(year == 2019)
#Tidying and reshaping GDP data
gdp_data_tidy <- gdp_data %>%
select(-'Series Code')
gdp_data_tidy <- gdp_data_tidy %>%
clean_names()
gdp_data_tidy <- gdp_data_tidy %>% #Citation: https://stackoverflow.com/questions/58837773/pivot-wider-issue-values-in-values-from-are-not-uniquely-identified-output-w
group_by(series_name) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = series_name, values_from = c(x2017_yr2017, x2018_yr2018, x2019_yr2019, x2020_yr2020)) %>%
select(-row)
gdp_data_tidy <- gdp_data_tidy %>%
select(-c(8, 14, 20:26))
gdp_data_tidy <- gdp_data_tidy %>%
rename('2017_gdp' = 3, '2017_gdpgrowth' = 4,
'2017_gdppercap2010usd' = 5, '2017_gdppercapcurrentusd' = 6,
'2017_percenttradegpd' = 7,
'2018_gdp' = 8, '2018_gdpgrowth' = 9,
'2018_gdppercap2010usd' = 10, '2018_gdppercapcurrentusd' = 11,
'2018_percenttradegpd' = 12,
'2019_gdp' = 13, '2019_gdpgrowth' = 14,
'2019_gdppercap2010usd' = 15, '2019_gdppercapcurrentusd' = 16,
'2019_percenttradegpd' = 17)
gdp_part <- gdp_data_tidy %>% pivot_longer(
cols = starts_with(c("2017", "2018", "2019")),
names_to = c("year"),
values_to = c("value"),
values_drop_na = TRUE
)
gdp_part$value <- as.numeric(gdp_part$value)
gdp_part <- gdp_part %>%
separate(col = year,
into = c("year", "measure"),
sep = "_") %>%
filter(!is.na(value))
gdp_part %>%
group_by(country_name, year, measure, value) %>%
summarise(value = sum(value))
gdp_part <- gdp_part %>%
group_by(country_name, year, measure) %>%
summarise(value = sum(value))
gdp_part <- gdp_part %>%
pivot_wider(names_from = measure, values_from = value)
gdp_part[complete.cases(gdp_part), ] #Checking for NAs
gdp_final <- na.omit(gdp_part) #Omitting NAs
head(world_trade)
head(world_trade_flows)
View(world_trade_flows)
unique(world_trade_flows$importer_name)
world_trade_flows <- world_trade_flows %>%
filter(year == 2019, importer_name %in% c("China", "Japan", "USA, Puerto Rico and US Virgin Islands", "India", "Republic of Korea"),
exporter_name %in% ("China", "Japan", "USA, Puerto Rico and US Virgin Islands", "India", "Republic of Korea"))
world_trade_flows <- world_trade_flows %>%
filter(year == 2019, importer_name %in% c("China", "Japan", "USA", "Puerto Rico and US Virgin Islands", "India", "Republic of Korea"),
exporter_name %in% c("China", "Japan", "USA", "Puerto Rico and US Virgin Islands", "India", "Republic of Korea"))
gdp_data_tidy <- gdp_data %>%
select(-'Series Code')
gdp_data_tidy <- gdp_data_tidy %>%
clean_names()
gdp_data_tidy <- gdp_data_tidy %>% #Citation: https://stackoverflow.com/questions/58837773/pivot-wider-issue-values-in-values-from-are-not-uniquely-identified-output-w
group_by(series_name) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = series_name, values_from = c(x2017_yr2017, x2018_yr2018, x2019_yr2019, x2020_yr2020)) %>%
select(-row)
gdp_data_tidy <- gdp_data_tidy %>%
select(-c(8, 14, 20:26))
gdp_data_tidy <- gdp_data_tidy %>%
rename('2017_gdp' = 3, '2017_gdpgrowth' = 4,
'2017_gdppercap2010usd' = 5, '2017_gdppercapcurrentusd' = 6,
'2017_percenttradegpd' = 7,
'2018_gdp' = 8, '2018_gdpgrowth' = 9,
'2018_gdppercap2010usd' = 10, '2018_gdppercapcurrentusd' = 11,
'2018_percenttradegpd' = 12,
'2019_gdp' = 13, '2019_gdpgrowth' = 14,
'2019_gdppercap2010usd' = 15, '2019_gdppercapcurrentusd' = 16,
'2019_percenttradegpd' = 17)
gdp_part <- gdp_data_tidy %>% pivot_longer(
cols = starts_with(c("2017", "2018", "2019")),
names_to = c("year"),
values_to = c("value"),
values_drop_na = TRUE
)
gdp_part$value <- as.numeric(gdp_part$value)
gdp_part <- gdp_part %>%
separate(col = year,
into = c("year", "measure"),
sep = "_") %>%
filter(!is.na(value))
gdp_part %>%
group_by(country_name, year, measure, value) %>%
summarise(value = sum(value))
gdp_part <- gdp_part %>%
group_by(country_name, year, measure) %>%
summarise(value = sum(value))
gdp_part <- gdp_part %>%
pivot_wider(names_from = measure, values_from = value)
gdp_part[complete.cases(gdp_part), ] #Checking for NAs
gdp_final <- na.omit(gdp_part) #Omitting NAs
gdp_and_trade_flows <- world_trade_flows %>%
inner_join(gdp_final, by = c("exporter_name" = "country_name"))
view(gdp_and_trade_flows)
unique(world_trade_flows$year)
gdp_and_trade_flows <- gdp_and_trade_flows %>%
filter(year.y == 2019)
gdp_and_trade_flows <- gdp_and_trade_flows %>%
select(-year.x)
view(gdp_and_trade_flows)
rm(list = ls(gdp_and_trade_flows, world_trade_flows))
rm(list = ls(gdp_and_trade_flows))
wto_data <- read_csv("WtoData_20210313234634.csv")
head(wto_data)
wto_data <- clean_names(wto_data)
View(wto_data)
us_asia_flows <- read_csv("comtrade.csv")
View(us_asia_flows)
us_asia_flows <- clean_names(us_asia_flows)
View(gdp_final)
new_world_flows <- read_csv("comtrade.csv")
new_world_flows <- read_csv("comtrade.csv")
View(new_world_flows)
us_asia_world_flows <- read_csv("comtrade.csv")
us_asia_world_flows <- clean_names(us_asia_world_flows)
View(us_asia_world_flows)
gdp_and_trade_flows <- gdp_final %>%
inner_join(us_asia_world_flows, by = c("country_name" = "reporter"))
view(gdp_and_trade_flows)
names(gdp_and_trade_flows)
gdp_and_trade_flows <- gdp_and_trade_flows %>%
select(-c(9:14, 16:18, 20, 21:35, 41))
view(gdp_and_trade_flows)
gdp_and_trade_flows <- gdp_and_trade_flows %>%
select(-c(11, 12, 14, 15))
view(gdp_and_trade_flows)
gdp_and_trade_flows %>%
group_by(country_name, year.x, trade_flow, partner) %>%
dplyr::summarise(trade_value = max(trade_value_us))
gdp_and_trade_flows %>%
group_by(country_name, year.x, trade_flow, partner) %>%
dplyr::summarise(trade_value = max(trade_value_us))
gdp_and_trade_flows %>%
group_by(country_name, year.x, trade_flow, partner, gdp, gdpgrowth, gdppercap2010usd, gdppercap2010usd, gdppercapcurrentusd) %>%
dplyr::summarise(trade_value = max(trade_value_us))
gdp_and_trade_flows %>%
group_by(country_name, year.x, trade_flow, partner, gdp, gdpgrowth, gdppercap2010usd, gdppercapcurrentusd) %>%
dplyr::summarise(trade_value = max(trade_value_us))
unique(gdp_and_trade_flows$country_name)
